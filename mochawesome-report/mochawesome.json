{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 3,
    "pending": 0,
    "failures": 1,
    "start": "2018-10-24T08:25:53.947Z",
    "end": "2018-10-24T08:26:58.917Z",
    "duration": 64970,
    "testsRegistered": 4,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "warning",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "7e9009c0-c39a-44d0-86c1-ba84ecb43c4b",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 1713,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "global.expect = expect;\nglobal.browser = await puppeteer.launch(opts);",
        "err": {},
        "isRoot": true,
        "uuid": "5231d5ca-500b-4cfa-aa4b-d1f28d960b22",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [
      {
        "title": "\"after all\" hook",
        "fullTitle": "\"after all\" hook",
        "timedOut": false,
        "duration": 119,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "browser.close();\nopen('./mochawesome-report/mochawesome.html');\nglobal.browser = globalVariables.browser;\nglobal.expect = globalVariables.expect;",
        "err": {},
        "isRoot": true,
        "uuid": "cf214699-c45c-4b10-b4d8-e86728dc3d3e",
        "isHook": true,
        "skipped": false
      }
    ],
    "tests": [],
    "suites": [
      {
        "uuid": "715d77ab-377b-4f8b-a5d2-8f09897b7aa4",
        "title": "simple test for fv main console",
        "fullFile": "/Users/tariqulislam/Development/node-playground/puppeteer-mocha-automated-testing/test/sample.spec.js",
        "file": "/test/sample.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "simple test for fv main console \"before all\" hook",
            "timedOut": false,
            "duration": 2268,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "page = await browser.newPage();\nawait page.goto(\"http://localhost:2000/\");\nawait page.setViewport( { width: 1920, height: 1040} );",
            "err": {},
            "isRoot": false,
            "uuid": "96ab07d5-c050-4e68-ab95-18067b7b6aa0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "simple test for fv main console \"after all\" hook",
            "timedOut": false,
            "duration": 113,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "await page.close();",
            "err": {},
            "isRoot": false,
            "uuid": "d337db08-3bee-4207-88a2-369868b66266",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "should show the error message when login with invalid credentials",
            "fullTitle": "simple test for fv main console should show the error message when login with invalid credentials",
            "timedOut": false,
            "duration": 14780,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const emailInput = \"input[type=email]\";\nconst passwordInput = \"input[type=password]\";\nconst submitSelector = \"button[type=submit]\";\n \n linkEmail = await page.$(emailInput);\n linkPassword = await page.$(passwordInput);\n linkSubmit = await page.$(submitSelector);\n await linkEmail.click({ clickCount: 3 });\n await linkEmail.type('admin.test@futurevaultinc.com'); // add the email address for linkedin //\n await linkPassword.click({ clickCount: 3});\n await linkPassword.type('ddddd'); // add password for linkedin account\n await linkSubmit.click();\n // await page.click(); \n //await page.waitForNavigation(); \n await page.waitFor(3000);\n let errorMessage = await page.evaluate(() => {\n     let selector = \"ul > li\";\n     let errMsg = document.querySelector(selector).innerText;\n     return errMsg;\n });\n const expectedErrorMessage = \"You have provided an incorrect email/username and/or password or maybe you are not in our system.\";\n expect(expectedErrorMessage).to.eql(errorMessage);\n await page.waitFor(3000);",
            "err": {},
            "isRoot": false,
            "uuid": "15b2eb8e-59d3-4599-b9a0-26400e6f8510",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should successfull login and redirect to home page",
            "fullTitle": "simple test for fv main console should successfull login and redirect to home page",
            "timedOut": false,
            "duration": 12307,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const emailInput = \"input[type=email]\";\nconst passwordInput = \"input[type=password]\";\nconst submitSelector = \"button[type=submit]\";\n \n linkEmail = await page.$(emailInput);\n linkPassword = await page.$(passwordInput);\n linkSubmit = await page.$(submitSelector);\n await linkEmail.click({ clickCount: 3 });\n await linkEmail.type('admin.test@futurevaultinc.com'); // add the email address for linkedin //\n await linkPassword.click({ clickCount: 3});\n await linkPassword.type('Pass1234'); // add password for linkedin account\n await linkSubmit.click();\n // await page.click(); \n await page.waitForNavigation(); \n await page.waitFor(3000);",
            "err": {},
            "isRoot": false,
            "uuid": "e6306033-4985-43c8-a796-2b02c0561649",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should select the sponsor from top nav bar",
            "fullTitle": "simple test for fv main console should select the sponsor from top nav bar",
            "timedOut": false,
            "duration": 3217,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "await page.evaluate(() => {\n    document.querySelector('#TopNavigationRow > div > div.navbar-nav > select > option:nth-child(3)').selected = true;\n    var element = document.querySelector('#TopNavigationRow > div > div.navbar-nav > select');\n    var event = new Event('change', {bubbles: true});\n    event.simulated=true;\n    element.dispatchEvent(event);\n});\nawait page.evaluate(() => {\n    const vaultTableSelector = \"#root > div > div.container-fluid > div > div.col-sm-9.col-sm-offset-3.col-md-10.col-md-offset-2.main > div > div > div.row > div:nth-child(2) > div > table\"\n})\nawait page.waitFor(3000);",
            "err": {},
            "isRoot": false,
            "uuid": "f08af6d1-62e5-44b3-a2f3-c490576f3cc7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should show the details page when select vault holder \"Details\" button from list",
            "fullTitle": "simple test for fv main console should show the details page when select vault holder \"Details\" button from list",
            "timedOut": false,
            "duration": 30432,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "const selector = \"#root > div > div.container-fluid > div > div.col-sm-9.col-sm-offset-3.col-md-10.col-md-offset-2.main > div > div > div.row > div:nth-child(2) > div > table > tbody > tr:nth-child(1) > td:nth-child(10) > button\";\nconst detailsButton = await page.$(selector);\nawait detailsButton.click();\nawait page.waitForNavigation();\nawait page.waitForResponse();\n        // await page.waitFor(3000);",
            "err": {
              "message": "TimeoutError: Navigation Timeout Exceeded: 30000ms exceeded",
              "estack": "TimeoutError: Navigation Timeout Exceeded: 30000ms exceeded\n    at Promise.then (node_modules/puppeteer/lib/FrameManager.js:1230:21)\n    at <anonymous>\n  -- ASYNC --\n    at Frame.<anonymous> (node_modules/puppeteer/lib/helper.js:144:27)\n    at Page.waitForNavigation (node_modules/puppeteer/lib/Page.js:599:49)\n    at Page.<anonymous> (node_modules/puppeteer/lib/helper.js:145:23)\n    at Context.it (test/sample.spec.js:88:21)\n    at <anonymous>"
            },
            "isRoot": false,
            "uuid": "3ac0ec1b-793f-474c-82dc-d91b24008390",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "15b2eb8e-59d3-4599-b9a0-26400e6f8510",
          "e6306033-4985-43c8-a796-2b02c0561649",
          "f08af6d1-62e5-44b3-a2f3-c490576f3cc7"
        ],
        "failures": [
          "3ac0ec1b-793f-474c-82dc-d91b24008390"
        ],
        "pending": [],
        "skipped": [],
        "duration": 60736,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 0
  },
  "copyrightYear": 2018
}